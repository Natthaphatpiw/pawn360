import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

interface EstimateRequest {
  itemType: string;
  brand: string;
  model: string;
  serialNo: string;
  accessories: string;
  conditionScore: number; // AI-analyzed condition score (0-1)
  conditionReason: string; // AI-analyzed condition reason
  defects: string;
  note: string;
  images: string[];
  lineId: string;
}

// Agent 1: Normalize input data
async function normalizeInput(input: EstimateRequest): Promise<string> {
  const prompt = `Normalize and clean the following product information for accurate pricing. Correct any typos, standardize formatting, and make the description suitable for market research:

Product Type: ${input.itemType}
Brand: ${input.brand}
Model: ${input.model}
Serial Number: ${input.serialNo}
Accessories: ${input.accessories}
Condition: ${Math.round(input.conditionScore * 100)}% (${input.conditionReason})
Defects: ${input.defects}
Additional Notes: ${input.note}

Please provide a clean, standardized description that would be suitable for searching second-hand market prices. Focus on key specifications and condition details.`;

  const response = await openai.chat.completions.create({
    model: 'gpt-4.1-mini',
    messages: [{ role: 'user', content: prompt }],
    max_tokens: 300,
    temperature: 0.1,
  });

  return response.choices[0]?.message?.content || '';
}

// Agent 2: Market price estimation with web search simulation
async function getMarketPrice(normalizedInput: string): Promise<number> {
  const prompt = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Kaidee.com ‡πÅ‡∏•‡∏∞ Facebook Marketplace

‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏ô‡∏≥)

${normalizedInput}

‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Kaidee.com ‡πÅ‡∏•‡∏∞ Facebook Marketplace
- ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
- ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥)

‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏≤‡∏ó‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 15000`;

  const response = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    messages: [{ role: 'user', content: prompt }],
    max_tokens: 20,
    temperature: 0.4,
  });

  const priceText = response.choices[0]?.message?.content?.trim() || '0';
  const price = parseInt(priceText.replace(/[^\d]/g, '')) || 0;

  console.log('‚úÖ Estimated market price:', price);
  return price;
}


export async function POST(request: NextRequest) {
  try {
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      );
    }

    const body: EstimateRequest = await request.json();

    // Validate required fields
    if (!body.itemType || !body.brand || !body.model || !body.lineId || body.conditionScore === undefined) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Agent 1: Normalize input
    console.log('üîÑ Normalizing input...');
    const normalizedInput = await normalizeInput(body);
    console.log('‚úÖ Input normalized:', normalizedInput);

    // Agent 2: Get market price using web search
    console.log('üîÑ Getting market price...');
    const marketPrice = await getMarketPrice(normalizedInput);
    console.log('‚úÖ Market price:', marketPrice);

    // Use condition score from AI analysis (already provided)
    const conditionScore = body.conditionScore;
    console.log('‚úÖ Using condition score:', conditionScore);

    // Calculate final estimate: market price * condition score
    const estimatedPrice = Math.round(marketPrice * conditionScore);

    // Ensure minimum price
    const finalPrice = Math.max(estimatedPrice, 100);

    return NextResponse.json({
      success: true,
      estimatedPrice: finalPrice,
      condition: conditionScore,
      conditionReason: body.conditionReason,
      marketPrice: marketPrice,
      confidence: 0.85, // Placeholder confidence score
      normalizedInput: normalizedInput
    });

  } catch (error: any) {
    console.error('Error in AI estimation:', error);
    return NextResponse.json(
      { error: 'Failed to estimate price' },
      { status: 500 }
    );
  }
}
