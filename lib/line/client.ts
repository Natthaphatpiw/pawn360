import { Client, ClientConfig, WebhookEvent, FlexMessage } from '@line/bot-sdk';
import axios from 'axios';

// Lazy initialization of LINE client
let lineClient: Client | null = null;

function getLineClient(): Client {
  if (!lineClient) {
    const channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
    const channelSecret = process.env.LINE_CHANNEL_SECRET;

    if (!channelAccessToken || !channelSecret) {
      throw new Error('LINE channel access token or secret not configured');
    }

    const config: ClientConfig = {
      channelAccessToken,
      channelSecret,
    };

    lineClient = new Client(config);
  }
  return lineClient;
}

// Link Rich Menu to User
export async function linkRichMenuToUser(userId: string, richMenuId: string) {
  try {
    const client = getLineClient();
    await client.linkRichMenuToUser(userId, richMenuId);
    return { success: true };
  } catch (error) {
    console.error('Error linking rich menu:', error);
    throw error;
  }
}

// Send Negotiation Message
export async function sendNegotiationMessage(
  userId: string,
  itemId: string,
  amount: number,
  days: number,
  interestRate: number,
  interest: number,
  totalAmount: number,
  qrUrl: string
) {
  try {
    const liffId = process.env.LIFF_ID_PAWN || '2008216710-54P86MRY';
    const acceptUrl = `https://liff.line.me/${liffId}/pawn/accept-negotiation?itemId=${itemId}`;

    const client = getLineClient();
    await client.pushMessage(userId, {
      type: 'flex',
      altText: 'üîÑ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥',
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥',
              weight: 'bold',
              size: 'lg',
              color: '#ffffff',
            },
          ],
          backgroundColor: '#FF9800',
          paddingAll: 'lg',
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ',
              size: 'md',
              wrap: true,
              margin: 'md',
            },
            {
              type: 'separator',
              margin: 'lg',
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'lg',
              spacing: 'sm',
              contents: [
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '1. ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏ô‡∏≥',
                      color: '#666666',
                      size: 'sm',
                      flex: 0,
                    },
                    {
                      type: 'text',
                      text: `${amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
                      wrap: true,
                      color: '#1DB446',
                      size: 'md',
                      weight: 'bold',
                      flex: 0,
                      align: 'end',
                    },
                  ],
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '2. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô',
                      color: '#666666',
                      size: 'sm',
                      flex: 0,
                    },
                    {
                      type: 'text',
                      text: `${days} ‡∏ß‡∏±‡∏ô`,
                      wrap: true,
                      color: '#666666',
                      size: 'md',
                      weight: 'bold',
                      flex: 0,
                      align: 'end',
                    },
                  ],
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '3. ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
                      color: '#666666',
                      size: 'sm',
                      flex: 0,
                    },
                    {
                      type: 'text',
                      text: `${interestRate}%/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`,
                      wrap: true,
                      color: '#666666',
                      size: 'md',
                      weight: 'bold',
                      flex: 0,
                      align: 'end',
                    },
                  ],
                },
                {
                  type: 'separator',
                  margin: 'md',
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  margin: 'md',
                  contents: [
                    {
                      type: 'text',
                      text: '4. ‡∏¢‡∏≠‡∏î‡πÑ‡∏ñ‡πà‡∏ñ‡∏≠‡∏ô',
                      color: '#666666',
                      size: 'sm',
                      flex: 0,
                    },
                    {
                      type: 'text',
                      text: `${totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
                      wrap: true,
                      color: '#E91E63',
                      size: 'xl',
                      weight: 'bold',
                      flex: 0,
                      align: 'end',
                    },
                  ],
                },
                {
                  type: 'text',
                  text: `(${amount.toLocaleString()} + ${interest.toLocaleString()})`,
                  size: 'xs',
                  color: '#999999',
                  align: 'end',
                },
              ],
            },
          ],
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: '‚úÖ ‡∏ï‡∏Å‡∏•‡∏á',
                uri: acceptUrl,
              },
              style: 'primary',
              color: '#1DB446',
            },
            {
              type: 'text',
              text: '‡∏Å‡∏î‡∏ï‡∏Å‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà',
              size: 'xxs',
              color: '#999999',
              align: 'center',
              margin: 'sm',
            },
          ],
        },
      },
    });

    return { success: true };
  } catch (error) {
    console.error('Error sending negotiation message:', error);
    throw error;
  }
}

// Send Push Message with QR Code
export async function sendQRCodeImage(userId: string, itemId: string, s3Url: string) {
  try {
    // ‡∏™‡πà‡∏á Flex Message ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ QR Code ‡∏à‡∏≤‡∏Å S3
    const client = getLineClient();
    await client.pushMessage(userId, {
      type: 'flex',
      altText: '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏î‡∏π QR Code',
      contents: {
        type: 'bubble',
        hero: {
          type: 'image',
          url: s3Url,
          size: 'full',
          aspectRatio: '1:1',
          aspectMode: 'cover',
          action: {
            type: 'uri',
            label: '‡∏î‡∏π QR Code',
            uri: s3Url,
          },
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
              weight: 'bold',
              size: 'xl',
              color: '#1DB446',
              wrap: true,
            },
            {
              type: 'text',
              text: '‡∏ô‡∏≥ QR Code ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
              size: 'sm',
              color: '#666666',
              margin: 'md',
              wrap: true,
            },
            {
              type: 'separator',
              margin: 'xl',
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'lg',
              spacing: 'sm',
              contents: [
                {
                  type: 'text',
                  text: 'üì± ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                  color: '#1DB446',
                  size: 'sm',
                  weight: 'bold',
                },
                {
                  type: 'text',
                  text: '1. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π QR Code" ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á',
                  size: 'xs',
                  color: '#666666',
                  wrap: true,
                  margin: 'sm',
                },
                {
                  type: 'text',
                  text: '2. ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡πâ‡∏≤‡∏ô',
                  size: 'xs',
                  color: '#666666',
                  wrap: true,
                },
                {
                  type: 'text',
                  text: '3. ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
                  size: 'xs',
                  color: '#666666',
                  wrap: true,
                },
              ],
            },
          ],
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: '‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ QR Code ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà',
                uri: s3Url,
              },
              style: 'primary',
              color: '#1DB446',
              height: 'sm',
            },
            {
              type: 'text',
              text: `‡∏£‡∏´‡∏±‡∏™: ${itemId.substring(0, 8)}...`,
              size: 'xxs',
              color: '#999999',
              align: 'center',
              margin: 'sm',
            },
          ],
        },
      },
    });
    return { success: true };
  } catch (error) {
    console.error('Error sending QR code:', error);
    throw error;
  }
}

// Send Contract Completion Notification
export async function sendContractCompletionNotification(
  userId: string,
  contractData: any,
  itemData: any
) {
  try {
    const client = getLineClient();

    console.log('Sending contract notification for item:', itemData._id, 'user:', userId);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    const startDate = new Date();
    const dueDate = new Date(startDate);
    dueDate.setDate(dueDate.getDate() + (contractData.periodDays || 30));

    const dueDateString = dueDate.toLocaleDateString('th-TH', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    const contractNumber = `STORE${Date.now()}`;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á LIFF URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    const itemId = itemData._id.toString();
    const contractDetailsUrl = `https://liff.line.me/2008216710-gn6BwQjo/contract/${itemId}/details`;
    console.log('Contract details URL:', contractDetailsUrl);

    const flexMessage = {
      type: 'flex',
      altText: `‚úÖ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${contractNumber} ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: itemData.brand ? `${itemData.brand} ${itemData.model || ''}` : '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏≥',
              weight: 'bold',
              size: 'lg',
              color: '#0A4215',
              align: 'center'
            }
          ],
          backgroundColor: '#E7EFE9',
          paddingAll: 'lg'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‚úÖ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
              size: 'md',
              color: '#0A4215',
              weight: 'bold',
              wrap: true,
              margin: 'md'
            },
            {
              type: 'separator',
              margin: 'lg'
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'lg',
              spacing: 'sm',
              contents: [
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤:',
                      color: '#666666',
                      size: 'sm',
                      flex: 0
                    },
                    {
                      type: 'text',
                      text: contractNumber,
                      wrap: true,
                      color: '#0A4215',
                      size: 'sm',
                      weight: 'bold',
                      flex: 0,
                      align: 'end'
                    }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:',
                      color: '#666666',
                      size: 'sm',
                      flex: 0
                    },
                    {
                      type: 'text',
                      text: `${contractData.price?.toLocaleString() || '0'} ‡∏ö‡∏≤‡∏ó`,
                      wrap: true,
                      color: '#0A4215',
                      size: 'sm',
                      weight: 'bold',
                      flex: 0,
                      align: 'end'
                    }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢:',
                      color: '#666666',
                      size: 'sm',
                      flex: 0
                    },
                    {
                      type: 'text',
                      text: `${contractData.interestRate || 10}%`,
                      wrap: true,
                      color: '#666666',
                      size: 'sm',
                      weight: 'bold',
                      flex: 0,
                      align: 'end'
                    }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:',
                      color: '#666666',
                      size: 'sm',
                      flex: 0
                    },
                    {
                      type: 'text',
                      text: `${contractData.periodDays || 30} ‡∏ß‡∏±‡∏ô`,
                      wrap: true,
                      color: '#666666',
                      size: 'sm',
                      weight: 'bold',
                      flex: 0,
                      align: 'end'
                    }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    {
                      type: 'text',
                      text: '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î:',
                      color: '#666666',
                      size: 'sm',
                      flex: 0
                    },
                    {
                      type: 'text',
                      text: dueDateString,
                      wrap: true,
                      color: '#0A4215',
                      size: 'sm',
                      weight: 'bold',
                      flex: 0,
                      align: 'end'
                    }
                  ]
                }
              ]
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'horizontal',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              style: 'primary',
              action: {
                type: 'uri',
                label: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
                uri: `https://pawn360.vercel.app/contract-info/${itemId}`
              },
              color: '#0A4215',
              flex: 1
            },
            {
              type: 'button',
              style: 'secondary',
              action: {
                type: 'postback',
                label: '‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô',
                data: `action=store_location&itemId=${itemData._id}`
              },
              color: '#F0EFEF',
              flex: 1
            }
          ]
        }
      }
    };

    await client.pushMessage(userId, flexMessage as FlexMessage);
    return { success: true, contractNumber };
  } catch (error) {
    console.error('Error sending contract completion notification:', error);
    throw error;
  }
}

// Send Contract Modification Confirmation
export async function sendConfirmationMessage(lineId: string, modifications: any, newContract: any) {
  try {
    const client = getLineClient();

    console.log('Sending contract confirmation to:', lineId);
    console.log('Modifications:', modifications);
    console.log('New contract:', newContract);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á modifications
    const isContractCreation = modifications?.type === 'contract_creation';

    // Handle both array format and object format for modifications
    let changesList: string[] = [];
    if (Array.isArray(modifications)) {
      // Direct array format from ContractForm
      changesList = modifications;
    } else if (modifications?.changes && Array.isArray(modifications.changes)) {
      // Object format with changes property
      changesList = modifications.changes;
    }

    const headerText = isContractCreation ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤' : '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤';
    const altText = isContractCreation ? `üîî ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥` : `üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤`;
    const modificationText = isContractCreation
      ? '‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà'
      : (changesList.length > 0)
        ? changesList.join('\n‚Ä¢ ')
        : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á';

    const flexMessage = {
      type: 'flex',
      altText: altText,
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: headerText,
              weight: 'bold',
              size: 'lg',
              color: '#ffffff',
              align: 'center'
            },
          ],
          backgroundColor: '#0A4215',
          paddingAll: 'lg'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: isContractCreation ? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤:' : '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:',
              weight: 'bold',
              size: 'md',
              margin: 'md'
            },
            {
              type: 'text',
              text: isContractCreation ? modificationText : `‚Ä¢ ${modificationText}`,
              size: 'sm',
              color: '#555555',
              wrap: true,
              margin: 'sm'
            },
            {
              type: 'separator',
              margin: 'lg'
            },
            {
              type: 'text',
              text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤:',
              weight: 'bold',
              size: 'md',
              margin: 'lg'
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'lg',
              spacing: 'sm',
              contents: [
                ...(newContract.storeName ? [{
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: newContract.storeName, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                }] : []),
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏ô‡∏≥:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: `${(newContract.pawnedPrice || newContract.pawnPrice || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: `${(newContract.interestAmount || newContract.interest || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: `${newContract.periodDays || newContract.loanDays || 0} ‡∏ß‡∏±‡∏ô`, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: `${(newContract.remainingAmount || newContract.total || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`, wrap: true, color: '#E91E63', size: 'md', flex: 5, weight: 'bold' }
                  ]
                }
              ]
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'horizontal',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              style: 'secondary',
              action: {
                type: 'postback',
                label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                data: `action=cancel_contract_modification&itemId=${newContract.itemId || ''}`
              },
              color: '#F0EFEF'
            },
            {
              type: 'button',
              style: 'primary',
              action: {
                type: 'postback',
                label: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                data: `action=confirm_contract_modification&itemId=${newContract.itemId || ''}`
              },
              color: '#0A4215'
            }
          ]
        }
      }
    };

    await client.pushMessage(lineId, flexMessage as FlexMessage);
    console.log('Contract confirmation sent successfully');
    return { success: true };
  } catch (error) {
    console.error('Error sending contract confirmation:', error);
    console.error('Error details:', error instanceof Error ? error.message : 'Unknown error');
    throw error;
  }
}

// Send Contract Creation Success Message
export async function sendConfirmationSuccessMessage(lineId: string, contractData: any) {
  try {
    const client = getLineClient();

    const dueDate = new Date(contractData.dueDate);
    const dueDateString = dueDate.toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });

    const flexMessage = {
      type: 'flex',
      altText: `‚úÖ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${contractData.contractNumber}`,
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‚úÖ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
              weight: 'bold',
              size: 'lg',
              color: '#ffffff',
              align: 'center'
            },
          ],
          backgroundColor: '#0A4215',
          paddingAll: 'lg'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ',
              weight: 'bold',
              size: 'md',
              margin: 'lg',
              color: '#0A4215'
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'lg',
              spacing: 'sm',
              contents: [
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: contractData.contractNumber, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                },
                ...(contractData.storeName ? [{
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: contractData.storeName, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                }] : []),
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏ô‡∏≥:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: `${(contractData.pawnedPrice || contractData.pawnPrice || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`, wrap: true, color: '#333333', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: `${(contractData.remainingAmount || contractData.total || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`, wrap: true, color: '#E91E63', size: 'md', flex: 5, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  spacing: 'sm',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î:', color: '#666666', size: 'sm', flex: 2 },
                    { type: 'text', text: dueDateString, wrap: true, color: '#0A4215', size: 'sm', flex: 5, weight: 'bold' }
                  ]
                }
              ]
            },
            {
              type: 'text',
              text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
              size: 'sm',
              color: '#666666',
              wrap: true,
              margin: 'lg'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: '‡∏î‡∏π‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
                uri: `https://pawn360.vercel.app/contracts`
              },
              style: 'primary',
              color: '#0A4215'
            }
          ]
        }
      }
    };

    await client.pushMessage(lineId, flexMessage as FlexMessage);
    console.log('Contract creation success message sent successfully');
    return { success: true };
  } catch (error) {
    console.error('Error sending contract creation success message:', error);
    throw error;
  }
}

// Send Store Location Card
export async function sendStoreLocationCard(userId: string, storeData: any) {
  try {
    const client = getLineClient();

    console.log('Sending store location card for:', storeData.storeName);
    console.log('Store address data:', storeData.address);

    // Build address string
    const addressParts = [
      storeData.address?.houseNumber,
      storeData.address?.street,
      storeData.address?.subDistrict,
      storeData.address?.district,
      storeData.address?.province,
      storeData.address?.postcode
    ].filter(part => part && part.trim());

    const fullAddress = addressParts.join(' ').trim();

    console.log('Built address:', fullAddress);

    // Build Google Maps URL
    const googleMapsQuery = encodeURIComponent(fullAddress);
    const googleMapsUrl = storeData.googleMapUrl || `https://maps.google.com/?q=${googleMapsQuery}`;

    console.log('Google Maps URL:', googleMapsUrl);

    const flexMessage = {
      type: 'flex',
      altText: `üìç ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏£‡πâ‡∏≤‡∏ô: ${storeData.storeName}`,
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: `üìç ${storeData.storeName}`,
              weight: 'bold',
              size: 'lg',
              color: '#0A4215',
              align: 'center'
            }
          ],
          backgroundColor: '#E7EFE9',
          paddingAll: 'lg'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
              size: 'md',
              color: '#0A4215',
              weight: 'bold',
              margin: 'md'
            },
            {
              type: 'text',
              text: fullAddress || '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
              size: 'sm',
              color: '#666666',
              wrap: true,
              margin: 'sm'
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              action: {
                type: 'uri',
                label: '‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                uri: googleMapsUrl
              },
              style: 'primary',
              color: '#0A4215'
            }
          ]
        }
      }
    };

    await client.pushMessage(userId, flexMessage as FlexMessage);
    console.log('Store location card sent successfully');
    return { success: true };
  } catch (error) {
    console.error('Error sending store location card:', error);
    console.error('Error details:', error instanceof Error ? error.message : 'Unknown error');
    throw error;
  }
}

// Send Text Message
export async function sendTextMessage(userId: string, text: string) {
  try {
    const client = getLineClient();
    await client.pushMessage(userId, {
      type: 'text',
      text,
    });
    return { success: true };
  } catch (error) {
    console.error('Error sending text message:', error);
    throw error;
  }
}

// Get User Profile
export async function getUserProfile(userId: string) {
  try {
    const client = getLineClient();
    const profile = await client.getProfile(userId);
    return profile;
  } catch (error) {
    console.error('Error getting user profile:', error);
    throw error;
  }
}

// Download LINE Image
export async function downloadLineImage(messageId: string): Promise<Buffer> {
  const client = getLineClient();

  try {
    const stream = await client.getMessageContent(messageId);
    const chunks: Buffer[] = [];

    return new Promise((resolve, reject) => {
      stream.on('data', (chunk: Buffer) => {
        chunks.push(chunk);
      });

      stream.on('end', () => {
        resolve(Buffer.concat(chunks));
      });

      stream.on('error', (error: Error) => {
        reject(error);
      });
    });
  } catch (error) {
    console.error('Error downloading LINE image:', error);
    throw error;
  }
}

// Verify LINE Signature
export function verifySignature(body: string, signature: string): boolean {
  const crypto = require('crypto');
  const channelSecret = process.env.LINE_CHANNEL_SECRET || '';

  const hash = crypto
    .createHmac('SHA256', channelSecret)
    .update(body)
    .digest('base64');

  return hash === signature;
}
